from aiogram import Bot
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from sqlalchemy import select
from db.models import TodayControl
from db.database import AsyncSessionLocal
from db.utils import get_all_users
from src.utils import generate_report, get_admin_ids
import logging


ADMINS_FILE = "admins.json"


async def send_reminder(bot: Bot):
    logging.info("–†–∞—Å—Å—ã–ª–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º")
    users = await get_all_users()
    for user in users:
        try:
            await bot.send_message(
                user.telegram_id,
                "üö® –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é —Å 21:40 –¥–æ 22:10."
            )
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.telegram_id}: {e}")


async def send_last_chance(bot: Bot):
    logging.info("–û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º")
    async with AsyncSessionLocal() as session:
        users = await get_all_users()
        
        controls_result = await session.execute(select(TodayControl))
        controls = controls_result.scalars().all()
        controls_by_id = {c.telegram_id: c for c in controls}
        
        not_checked = [
            user
            for user in users
            if user.telegram_id not in controls_by_id
        ]
        
        for user in not_checked:
            try:
                await bot.send_message(
                    user.telegram_id,
                    "üö® –û—Å—Ç–∞–ª–æ—Å—å 5 –º–∏–Ω—É—Ç —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–≤–æ—é –ª–æ–∫–∞—Ü–∏—é."
                )
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.telegram_id}: {e}")


async def send_daily_report(bot: Bot):
    logging.info("–†–∞—Å—Å—ã–ª–∫–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –æ—Ç—á—ë—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º")
    
    admins = await get_admin_ids()
    report = await generate_report()

    for admin_id in admins:
        try:
            await bot.send_message(admin_id, report)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–¥–º–∏–Ω—É {admin_id}: {e}")


async def send_questionnaire(bot: Bot):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        (InlineKeyboardButton(text="‚úÖ –Ø –±—É–¥—É –ø–∏—Ç–∞—Ç—å—Å—è", callback_data="questionnaire_feeding_yes"),),
        (InlineKeyboardButton(text="‚ùå –Ø –Ω–µ –±—É–¥—É –ø–∏—Ç–∞—Ç—å—Å—è", callback_data="questionnaire_feeding_no"),)
    ])
    text = (
        f"–¢–æ–≤–∞—Ä–∏—â–∏, –Ω–∞–ø–æ–º–∏–Ω–∞—é –ø—Ä–æ –Ω–æ–≤—ã–µ –ø—Ä–∞–≤–∏–ª–∞ –∫–æ—Ç–ª–æ–≤–æ–≥–æ –¥–æ–≤–æ–ª—å—Å—Ç–≤–∏—è:\n"
        f"–ï—Å–ª–∏ –Ω–∞ –≤–∞—Å –ø–∏—à–µ—Ç—Å—è —Ä–∞–ø–æ—Ä—Ç, —Ç–æ –≤—ã –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç–µ—Å—å –Ω–∞ –≤—Å–µ –æ–±–µ–¥—ã –ø–æ –±—É–¥–Ω–∏–º –¥–Ω—è–º, "
        f"–∏ –¥–∞–∂–µ –µ—Å–ª–∏ –Ω–µ –±—É–¥–µ—Ç–µ –ø–∏—Ç–∞—Ç—å—Å—è –≤ –∫–æ–Ω–∫—Ç—Ä–µ—Ç–Ω—ã–π –¥–µ–Ω—å - –≤—Å—ë —Ä–∞–≤–Ω–æ –∑–∞ –Ω–µ–≥–æ –∑–∞–ø–ª–∞—Ç–∏—Ç–µ.\n"
        f"–í –æ—á–µ—Ä–µ–¥–Ω–æ–π —Ä–∞–∑ –ø—Ä–æ–≤–æ–∂—É –æ–ø—Ä–æ—Å, –∫—Ç–æ –±—É–¥–µ—Ç –ø–∏—Ç–∞—Ç—å—Å—è –≤ —Å—Ç–æ–ª–æ–≤–æ–π –ü–ü–î. "
        f"–ï—Å–ª–∏ –≤—ã —Å–æ–≥–ª–∞—Å–Ω—ã –ø–∏—Ç–∞—Ç—å—Å—è –≤ —Å—Ç–æ–ª–æ–≤–æ–π –ü–ü–î –Ω–∞ —Ç–∞–∫–∏—Ö —É—Å–ª–æ–≤–∏—è—Ö, –ø—Ä–æ–≥–æ–ª–æ—Å—É–π—Ç–µ –Ω–∏–∂–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π –∫–Ω–æ–ø–∫–æ–π.\n"
        f"–í –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ –±—É–¥–µ—Ç –ø–∏—Å–∞—Ç—å—Å—è —Ä–∞–ø–æ—Ä—Ç, –∫—Ç–æ –Ω–µ —É—Å–ø–µ–ª –±—É–¥–µ—Ç –ø–∏—Å–∞—Ç—å –µ–≥–æ –∑–∞ —Å–µ–±—è —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ."
    )
    users = await get_all_users()
    for user in users:
        try:
            await bot.send_message(
                user.telegram_id,
                text,
                reply_markup=keyboard
            )
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.telegram_id}: {e}")